#!/bin/sh

# !!!hint!!!
#   mit systemd sieht man echo's bei journalctl -f
#   will man bluetooth verwendenen dann bei Required-Start: bluetooth hinzufügen

### BEGIN INIT INFO
# Provides:          btcontrol
# Required-Start:    avahi networking $remote_fs $syslog
# Required-Stop:     networking
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: ferbsis btcontoll
# Description:       Gartenbahn Steuerung
#                    übers Handy (Midp | Android, BT | Wlan)
### END INIT INFO

# Using the lsb functions to perform the operations.
. /lib/lsb/init-functions
# wenn raspiPWM verwendet wird muss als root gestartet werden
USER=pi
#CHUSER=$USER
# Process name ( For display )
NAME=btcontrol
# Daemon name, where is the actual executable
DAEMON=/home/$USER/dev/btcontrol/bluetoothserver/btserver
# pid file for the daemon
PIDFILE=/var/run/btserver.pid
DEBUG=""

# If the daemon is not there, then exit.
test -x $DAEMON || exit 5

case $1 in
	start)
		DIR=$(dirname $DAEMON)
		# rasp ACT LED:
		if [ -f /sys/class/leds/led0/brightness ] ; then
			chmod g+w /sys/class/leds/led0/brightness
			chgrp $USER /sys/class/leds/led0/brightness
		fi
		# Checked the PID file exists and check the actual status of process
		if [ -e $PIDFILE ]; then
			status_of_proc -p $PIDFILE $DAEMON "$NAME process" && status="0" || status="$?"
			# If the status is SUCCESS then don't need to start again.
			if [ $status = "0" ]; then
				exit # Exit
			fi
		fi
		# Start the daemon.
		log_daemon_msg "Starting the process" "$NAME"
		# Start the daemon with the help of start-stop-daemon
		# Log the message appropriately
		if [ "$CHUSER" ] ; then
			args="--chuid $CHUSER "
		fi
		if [ "$DEBUG" ] ; then
			args+="--no-close "
		fi
		if start-stop-daemon --start --quiet --oknodo $args --make-pidfile --pidfile $PIDFILE --background --chdir $DIR --exec $DAEMON ; then
			log_end_msg 0
		else
			log_end_msg 1
		fi
		if pgrep initbtrail.sh >/dev/null ; then
			echo "initbtrail already up";
		else
			$(dirname $DAEMON)/initbtrail.sh --wait-for-device &
		fi
		;;
	stop)
		# Stop the daemon.
		log_daemon_msg "stopping  the process" "$NAME" "pidfile: $PIDFILE"
		if [ -e $PIDFILE ]; then
			status_of_proc -p $PIDFILE $DAEMON "Stoppping the $NAME process" && status="0" || status="$?"
			if [ "$status" = 0 ]; then
				if [ "$CHUSER" ] ; then
					args="--user $CHUSER "
				fi
				start-stop-daemon --stop  --oknodo $args --pidfile $PIDFILE --retry=TERM/10/KILL/5
				ret=$?
				#/bin/rm -rf $PIDFILE
			fi
		else
			log_daemon_msg "$NAME process is not running"
			log_end_msg 0
		fi
		killall initbtrail.sh
		# wenns initbtrail nicht mehr rennt macht das exit code 3
		exit $ret
		;;
	restart)
		# Restart the daemon.
		$0 stop && sleep 2 && $0 start
		;;
	status)
		# Check the status of the process.
		if [ -e $PIDFILE ]; then
			status_of_proc -p $PIDFILE $DAEMON "$NAME process" && exit 0 || exit $?
		else
			log_daemon_msg "$NAME Process is not running"
			log_end_msg 0
		fi
		;;
	reload)
		# Reload the process. Basically sending some signal to a daemon to reload
		# it configurations.
		if [ -e $PIDFILE ]; then
			start-stop-daemon --stop --signal USR1 --quiet --pidfile $PIDFILE --name $NAME
			log_success_msg "$NAME process reloaded successfully"
		else
			log_failure_msg "$PIDFILE does not exists"
		fi
		;;
	*)
		# For invalid arguments, print the usage message.
		echo "Usage: $0 {start|stop|restart|reload|status}"
		exit 2
		;;
esac
